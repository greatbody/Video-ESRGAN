#!/bin/bash

# Check if input file is provided
if [ "$#" -ne 1 ]; then
    echo "Usage: $0 <input_video_path>"
    exit 1
fi

INPUT_VIDEO="$1"

# Verify input file exists
if [ ! -f "$INPUT_VIDEO" ]; then
    echo "Error: Input video file '$INPUT_VIDEO' not found!"
    exit 1
fi

# Generate unique folder names with timestamp
TIMESTAMP=$(date +%Y%m%d_%H%M%S)
TMP_FRAMES_DIR="tmp_frames_${TIMESTAMP}"
OUT_FRAMES_DIR="out_frames_${TIMESTAMP}"
OUTPUT_VIDEO="enhanced_${TIMESTAMP}.mp4"

# Get video info for framerate (automatic detection)
FRAMERATE=$(ffprobe -v error -select_streams v:0 -show_entries stream=r_frame_rate -of default=noprint_wrappers=1:nokey=1 "$INPUT_VIDEO")

# Function to display progress bar
show_progress() {
    local current=$1
    local total=$2
    local width=50
    local percentage=$((current * 100 / total))
    local completed=$((current * width / total))
    local remaining=$((width - completed))

    # Clear the line and display progress
    printf "\r\033[K"  # Clear current line
    printf "Progress: ["
    printf "%*s" $completed | tr ' ' '='
    printf "%*s" $remaining | tr ' ' '-'
    printf "] %d/%d (%d%%) " $current $total $percentage

    # Add time estimation if we have progress
    if [ $current -gt 0 ] && [ $current -lt $total ]; then
        local elapsed=$(($(date +%s) - START_TIME))
        local rate=$((current * 1000 / elapsed))  # frames per second * 1000
        if [ $rate -gt 0 ]; then
            local remaining_frames=$((total - current))
            local eta=$((remaining_frames * 1000 / rate))
            printf "ETA: %02d:%02d " $((eta / 60)) $((eta % 60))
        fi
    fi
}

# Step 1: Extract frames from video
echo "Step 1/3: Extracting frames from video..."
mkdir -p "$TMP_FRAMES_DIR"
ffmpeg -i "$INPUT_VIDEO" -qscale:v 1 -qmin 1 -qmax 1 -vsync 0 "${TMP_FRAMES_DIR}/frame%08d.jpg"

if [ $? -ne 0 ]; then
    echo "Error: Frame extraction failed!"
    exit 1
fi

# Count total frames for progress tracking
TOTAL_FRAMES=$(ls -1 "$TMP_FRAMES_DIR"/*.jpg 2>/dev/null | wc -l)
echo "Total frames to process: $TOTAL_FRAMES"

# Step 2: Enhance frames with Real-ESRGAN
echo "Step 2/3: Enhancing frames with Real-ESRGAN..."
mkdir -p "$OUT_FRAMES_DIR"

# Record start time for ETA calculation
START_TIME=$(date +%s)

# Start Real-ESRGAN in background, redirect output to log file
echo "Processing frames..."
./realesrgan-ncnn-vulkan -i "$TMP_FRAMES_DIR" -o "$OUT_FRAMES_DIR" -n realesr-animevideov3 -s 2 -f jpg > "realesrgan_${TIMESTAMP}.log" 2>&1 &
REALESRGAN_PID=$!

# Monitor progress
LAST_COUNT=0
while kill -0 $REALESRGAN_PID 2>/dev/null; do
    PROCESSED_FRAMES=$(ls -1 "$OUT_FRAMES_DIR"/*.jpg 2>/dev/null | wc -l)

    # Only update display if count changed to reduce flicker
    if [ $PROCESSED_FRAMES -ne $LAST_COUNT ]; then
        show_progress $PROCESSED_FRAMES $TOTAL_FRAMES
        LAST_COUNT=$PROCESSED_FRAMES
    fi

    sleep 0.5
done

# Wait for the process to complete and get exit status
wait $REALESRGAN_PID
REALESRGAN_EXIT_CODE=$?

# Final progress update
PROCESSED_FRAMES=$(ls -1 "$OUT_FRAMES_DIR"/*.jpg 2>/dev/null | wc -l)
show_progress $PROCESSED_FRAMES $TOTAL_FRAMES
echo  # New line after progress bar

if [ $REALESRGAN_EXIT_CODE -ne 0 ]; then
    echo "Error: Frame enhancement failed!"
    echo "Check log file: realesrgan_${TIMESTAMP}.log"
    exit 1
else
    echo "‚úì Frame enhancement completed successfully!"
    # Clean up log file if successful
    rm -f "realesrgan_${TIMESTAMP}.log"
fi

# Step 3: Merge enhanced frames back into video
echo "Step 3/3: Merging enhanced frames into new video..."
ffmpeg -i "${OUT_FRAMES_DIR}/frame%08d.jpg" -i "$INPUT_VIDEO" -map 0:v:0 -map 1:a:0 -c:a copy -c:v libx264 -r "$FRAMERATE" -pix_fmt yuv420p "$OUTPUT_VIDEO" -y

if [ $? -ne 0 ]; then
    echo "Error: Video merging failed!"
    exit 1
fi

# Calculate total processing time
TOTAL_TIME=$(($(date +%s) - START_TIME))
MINUTES=$((TOTAL_TIME / 60))
SECONDS=$((TOTAL_TIME % 60))

echo "‚úì All steps completed successfully!"
echo ""
echo "üìä Processing Summary:"
echo "   ‚Ä¢ Total frames processed: $TOTAL_FRAMES"
echo "   ‚Ä¢ Processing time: ${MINUTES}m ${SECONDS}s"
echo "   ‚Ä¢ Average time per frame: $((TOTAL_TIME * 1000 / TOTAL_FRAMES))ms"
echo ""
echo "üìÅ Output files:"
echo "   ‚Ä¢ Enhanced video: $OUTPUT_VIDEO"
echo "   ‚Ä¢ Temporary folders:"
echo "     - Extracted frames: $TMP_FRAMES_DIR"
echo "     - Enhanced frames: $OUT_FRAMES_DIR"
echo ""
echo "üí° Tip: You can safely delete the temporary folders if you're satisfied with the result."